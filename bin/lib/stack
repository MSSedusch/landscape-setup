#!/bin/bash -e
# stack implementation
# by Brian Clapper: https://github.com/bmc
# web blog: http://brizzled.clapper.org/blog/2011/10/28/a-bash-stack/
# forked from: https://github.com/bmc/lib-sh
# licensed under: This software is released under a BSD license, adapted from http://opensource.org/licenses/bsd-license.php

# Create a new stack.
#
# Usage: stack_new name
#
# Example: stack_new x

# Edited in order to work with bash < 4.3

function stack_new
{
    set +e && set +u
    : ${1?'Missing stack name'}
    if stack_exists $1
    then
        echo "Stack already exists -- $1" >&2
        set -e && set -u
        return 1
    fi

    eval "_stack_$1=()"
    eval "_stack_$1_i=0"
    set -e && set -u
    return 0
}

# Destroy a stack
#
# Usage: stack_destroy name
function stack_destroy
{
    set +e && set +u
    : ${1?'Missing stack name'}
    eval "unset _stack_$1 _stack_$1_i"
    set -e && set -u
    return 0
}

# Push one or more items onto a stack.
#
# Usage: stack_push stack item ...
function stack_push
{
    set +e && set +u
    : ${1?'Missing stack name'}
    : ${2?'Missing item(s) to push'}

    if no_such_stack $1
    then
        echo "No such stack -- $1" >&2
        set -e && set -u
        return 1
    fi

    stack=$1
    shift 1

    while (( $# > 0 ))
    do
        eval '_i=$'"_stack_${stack}_i"
        eval "_stack_${stack}[$_i]='$1'"
        eval "let _stack_${stack}_i+=1"
        shift 1
    done

    unset _i
    set -e && set -u
    return 0
}

# Pop the top element from the stack.
#
# Usage: stack_pop name var
#
# Example:
#    stack_pop mystack top
#    echo "Got $top"
function stack_pop
{
    set +e && set +u
    : ${1?'Missing stack name'}
    : ${2?'Missing name of variable for popped result'}

    eval 'let _i=$'"_stack_$1_i"
    if no_such_stack $1
    then
        echo "No such stack -- $1" >&2
        set -e && set -u
        return 1
    fi

    if [[ "$_i" -eq 0 ]]
    then
        echo "Empty stack -- $1" >&2
        set -e && set -u
        return 1
    fi

    let _i-=1
    eval "$2"='$'"{_stack_$1[$_i]}"
    eval "unset _stack_$1[$_i]"
    eval "_stack_$1_i=$_i"
    unset _i
    set -e && set -u
    return 0
}

function no_such_stack
{
    : ${1?'Missing stack name'}
    stack_exists $1
    ret=$?
    declare -i x
    let x="1-$ret"
    return $x
}

function stack_exists
{
    : ${1?'Missing stack name'}

    eval '_i=$'"_stack_$1_i"
    if [[ -z "$_i" ]]
    then
        return 1
    else
        return 0
    fi
}
