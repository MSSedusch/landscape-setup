#!/bin/bash -eu
#
# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

certmanager_config="$(read_landscape_config '.charts[] | select(.name=="certmanager")')"

# render issuer file
mako-render ${COMPONENT_TEMPLATE_HOME}/cert-manager-issuer.yaml.tmpl >${COMPONENT_STATE_HOME}/cert-manager-issuer.yaml

# install certificate manger
helm upgrade --install \
--force \
--wait \
--namespace certmanager \
cert-manager stable/cert-manager \
--version "$(jq -r '.version' <<< "$certmanager_config")"

# install certificate manager issuer
kubectl apply -f ${COMPONENT_STATE_HOME}/cert-manager-issuer.yaml

# remove existing certificates (they will not be overwritten)

kubectl -n garden delete secret gardener-dashboard-tls --ignore-not-found
kubectl -n kube-system delete secret identity-tls --ignore-not-found

# patch dashboard and ingress 
dashboard_issuer=$(kubectl get ingress -n garden  gardener-dashboard-ingress -o jsonpath="{.metadata.annotations.certmanager\.k8s\.io/cluster-issuer}")
if [ "$dashboard_issuer" != "letsencrypt" ] ; then
    kubectl -n garden annotate ingress gardener-dashboard-ingress certmanager.k8s.io/cluster-issuer=letsencrypt certmanager.k8s.io/acme-dns01-provider=route53-dns certmanager.k8s.io/acme-challenge-type=dns01
fi

identity_issuer=$(kubectl get ingress -n kube-system  identity-ingress -o jsonpath="{.metadata.annotations.certmanager\.k8s\.io/cluster-issuer}")
if [ "$identity_issuer" != "letsencrypt" ] ; then
    kubectl -n kube-system annotate ingress identity-ingress certmanager.k8s.io/cluster-issuer=letsencrypt certmanager.k8s.io/acme-dns01-provider=route53-dns certmanager.k8s.io/acme-challenge-type=dns01
fi

# wait until secrets have been recreated
max_retry_time=300
retry_stop=$(($(date +%s) + max_retry_time))
success=false
while [[ $(date +%s) -lt $retry_stop ]]; do
    sleep 10
    if $(kubectl -n garden get secret gardener-dashboard-tls &> /dev/null) && $(kubectl -n kube-system get secret identity-tls &> /dev/null); then
    success=true
    break;
    fi
    debug "Secrets gardener-dashboard-tls and identity-tls not recreated yet. Waiting ..."
done
if ! $success; then
    fail "Secrets gardener-dashboard-tls and identity-tls not created within $max_retry_time seconds!"
fi