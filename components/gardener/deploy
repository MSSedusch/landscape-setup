#!/bin/bash -eu
#
# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# generate Gardener API server TLS certificate if not yet done
path_tls="$COMPONENT_TEMPLATE_HOME/tls"
cert_names="gardener-apiserver"
if [[ ! -f "$COMPONENT_STATE_HOME/tls/$cert_names-tls.pem" ]]; then
  mkdir -p "$COMPONENT_STATE_HOME/tls"
  cfssl gencert \
    -profile=server \
    -ca="$LANDSCAPE_STATE_HOME/cert/ca.crt" \
    -ca-key="$LANDSCAPE_STATE_HOME/cert/ca.key" \
    -config="$path_tls/ca-config.json" \
    "$path_tls/$cert_names-config.json" | cfssljson -bare "$COMPONENT_STATE_HOME/tls/$cert_names-tls"
fi
cert_names="gardener-controller-manager"
if [[ ! -f "$COMPONENT_STATE_HOME/tls/$cert_names-tls.pem" ]]; then
  mkdir -p "$COMPONENT_STATE_HOME/tls"
  cfssl gencert \
    -profile=server \
    -ca="$LANDSCAPE_STATE_HOME/cert/ca.crt" \
    -ca-key="$LANDSCAPE_STATE_HOME/cert/ca.key" \
    -config="$path_tls/ca-config.json" \
    "$path_tls/$cert_names-config.json" | cfssljson -bare "$COMPONENT_STATE_HOME/tls/$cert_names-tls"
fi

etcd_server=$(read_landscape_config .etcd.server)

# render gardener helm chart values
python generate-values.py --gardener-repo-path="$GARDENER_REPO_PATH" --etcd-server=$etcd_server > "$COMPONENT_STATE_HOME/values.yaml"

gardener_config="$(read_landscape_config .charts[0])"

# install or upgrade gardener
helm upgrade --install \
  --force \
  --wait \
  --values "$COMPONENT_STATE_HOME/values.yaml" \
  --namespace garden \
  gardener \
  "$GARDENER_REPO_PATH/$(jq -r '.path' <<< "$gardener_config")"

# wait for api server extension to become available
max_retry_time=300
retry_stop=$(($(date +%s) + max_retry_time))
success=false
while [[ $(date +%s) -lt $retry_stop ]]; do
  sleep 1
  if kubectl get shoots &> /dev/null; then
    success=true
    break;
  fi
  debug "Gardener API server not yet reachable. Waiting..."
done
if ! $success; then
  fail "Gardener API server did not become reachable within $max_retry_time seconds!"
fi
